(function (e) {
    "function" === typeof define && define.amd ? define(["jquery.min"], e) : e(window.jQuery || window.Zepto)
})(function (e) {
    var t = function (t, n, r) {
        var i = this, s, o;
        t = e(t);
        n = "function" === typeof n ? n(t.val(), void 0, t, r) : n;
        var u = {
            getCaret: function () {
                try {
                    var e, n = 0, r = t.get(0), i = document.selection, s = r.selectionStart;
                    if (i && !~navigator.appVersion.indexOf("MSIE 10"))e = i.createRange(), e.moveStart("character", t.is("input") ? -t.val().length : -t.text().length), n = e.text.length; else if (s || "0" === s)n = s;
                    return n
                } catch (o) {
                }
            }, setCaret: function (e) {
                try {
                    if (t.is(":focus")) {
                        var n, r = t.get(0);
                        r.setSelectionRange ? r.setSelectionRange(e, e) : r.createTextRange && (n = r.createTextRange(), n.collapse(!0), n.moveEnd("character", e), n.moveStart("character", e), n.select())
                    }
                } catch (i) {
                }
            }, events: function () {
                t.on("keydown.mask", function () {
                    s = u.val()
                }).on("keyup.mask", u.behaviour).on("paste.mask drop.mask", function () {
                    setTimeout(function () {
                        t.keydown().keyup()
                    }, 100)
                }).on("change.mask", function () {
                    t.data("changed", !0)
                }).on("blur.mask", function () {
                    s === t.val() || t.data("changed") || t.trigger("change");
                    t.data("changed", !1)
                }).on("focusout.mask", function () {
                    r.clearIfNotMatch && !o.test(u.val()) && u.val("")
                })
            }, getRegexMask: function () {
                for (var e = [], t, r, s, o, u = 0; u < n.length; u++)(t = i.translation[n[u]]) ? (r = t.pattern.toString().replace(/.{1}$|^.{1}/g, ""), s = t.optional, (t = t.recursive) ? (e.push(n[u]), o = {
                    digit: n[u],
                    pattern: r
                }) : e.push(s || t ? r + "?" : r)) : e.push(n[u].replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"));
                e = e.join("");
                o && (e = e.replace(new RegExp("(" + o.digit + "(.*" + o.digit + ")?)"), "($1)?").replace(new RegExp(o.digit, "g"), o.pattern));
                return new RegExp(e)
            }, destroyEvents: function () {
                t.off("keydown keyup paste drop change blur focusout DOMNodeInserted ".split(" ").join(".mask ")).removeData("changeCalled")
            }, val: function (e) {
                var n = t.is("input");
                return 0 < arguments.length ? n ? t.val(e) : t.text(e) : n ? t.val() : t.text()
            }, getMCharsBeforeCount: function (e, t) {
                for (var r = 0, s = 0, o = n.length; s < o && s < e; s++)i.translation[n.charAt(s)] || (e = t ? e + 1 : e, r++);
                return r
            }, caretPos: function (e, t, r, s) {
                return i.translation[n.charAt(Math.min(e - 1, n.length - 1))] ? Math.min(e + r - t - s, r) : u.caretPos(e + 1, t, r, s)
            }, behaviour: function (t) {
                t = t || window.event;
                var n = t.keyCode || t.which;
                if (-1 === e.inArray(n, i.byPassKeys)) {
                    var r = u.getCaret(), s = u.val(), o = s.length, a = r < o, l = u.getMasked(), p = l.length, d = u.getMCharsBeforeCount(p - 1) - u.getMCharsBeforeCount(o - 1);
                    l !== s && u.val(l);
                    !a || 65 === n && t.ctrlKey || (8 !== n && 46 !== n && (r = u.caretPos(r, o, p, d)), u.setCaret(r));
                    return u.callbacks(t)
                }
            }, getMasked: function (e) {
                var t = [], s = u.val(), o = 0, a = n.length, f = 0, l = s.length, p = 1, v = "push", m = -1, g, y;
                r.reverse ? (v = "unshift", p = -1, g = 0, o = a - 1, f = l - 1, y = function () {
                    return -1 < o && -1 < f
                }) : (g = a - 1, y = function () {
                    return o < a && f < l
                });
                for (; y();) {
                    var w = n.charAt(o), E = s.charAt(f), S = i.translation[w];
                    if (S)E.match(S.pattern) ? (t[v](E), S.recursive && (-1 === m ? m = o : o === g && (o = m - p), g === m && (o -= p)), o += p) : S.optional && (o += p, f -= p), f += p; else {
                        if (!e)t[v](w);
                        E === w && (f += p);
                        o += p
                    }
                }
                e = n.charAt(g);
                a !== l + 1 || i.translation[e] || t.push(e);
                return t.join("")
            }, callbacks: function (e) {
                var i = u.val(), o = i !== s;
                if (!0 === o && "function" === typeof r.onChange)r.onChange(i, e, t, r);
                if (!0 === o && "function" === typeof r.onKeyPress)r.onKeyPress(i, e, t, r);
                if ("function" === typeof r.onComplete && i.length === n.length)r.onComplete(i, e, t, r)
            }
        };
        i.mask = n;
        i.options = r;
        i.remove = function () {
            var e;
            u.destroyEvents();
            u.val(i.getCleanVal()).removeAttr("maxlength");
            e = u.getCaret();
            u.setCaret(e - u.getMCharsBeforeCount(e));
            return t
        };
        i.getCleanVal = function () {
            return u.getMasked(!0)
        };
        i.init = function () {
            r = r || {};
            i.byPassKeys = [9, 16, 17, 18, 36, 37, 38, 39, 40, 91];
            i.translation = {
                0: {pattern: /\d/},
                9: {pattern: /\d/, optional: !0},
                "#": {pattern: /\d/, recursive: !0},
                A: {pattern: /[a-zA-Z0-9]/},
                S: {pattern: /[a-zA-Z]/}
            };
            i.translation = e.extend({}, i.translation, r.translation);
            i = e.extend(!0, {}, i, r);
            o = u.getRegexMask();
            !1 !== r.maxlength && t.attr("maxlength", n.length);
            r.placeholder && t.attr("placeholder", r.placeholder);
            t.attr("autocomplete", "off");
            u.destroyEvents();
            u.events();
            var s = u.getCaret();
            u.val(u.getMasked());
            u.setCaret(s + u.getMCharsBeforeCount(s, !0))
        }()
    }, n = {}, r = function () {
        var t = e(this), n = {};
        t.attr("data-mask-reverse") && (n.reverse = !0);
        "false" === t.attr("data-mask-maxlength") && (n.maxlength = !1);
        t.attr("data-mask-clearifnotmatch") && (n.clearIfNotMatch = !0);
        t.mask(t.attr("data-mask"), n)
    };
    e.fn.mask = function (r, i) {
        var s = this.selector, o = function () {
            var n = e(this).data("mask"), s = JSON.stringify;
            if ("object" !== typeof n || s(n.options) !== s(i) || n.mask !== r)return e(this).data("mask", new t(this, r, i))
        };
        this.each(o);
        s && !n[s] && (n[s] = !0, setTimeout(function () {
            e(document).on("DOMNodeInserted.mask", s, o)
        }, 500))
    };
    e.fn.unmask = function () {
        try {
            return this.each(function () {
                e(this).data("mask").remove().removeData("mask")
            })
        } catch (t) {
        }
    };
    e.fn.cleanVal = function () {
        return this.data("mask").getCleanVal()
    };
    e("*[data-mask]").each(r);
    e(document).on("DOMNodeInserted.mask", "*[data-mask]", r)
})
